var _api=require('../api');var _api2=_interopRequireDefault(_api);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}describe('EStyleSheet API',function(){var api=void 0;beforeEach(function(){api=new _api2.default();});describe('build',function(){it('should calc stylesheet, created before build()',function(){var styles=api.create({$a:1,$d:'$c',text:{$b:'1',fontSize:'$a',color:'$c'}});expect(styles).toEqual({});api.build({$c:3});expect(styles).toEqual({$a:1,$d:3,_text:{$b:'1',fontSize:1,color:3},text:0});});it('should calc stylesheet, created after build()',function(){api.build({$c:3});var styles=api.create({$b:'$c',button:{color:'$c'}});expect(styles).toEqual({$b:3,_button:{color:3},button:0});});it('should calculate global vars',function(){api.build({$c:'$d+1',$d:2});var styles=api.create({$b:'$c'});expect(styles).toEqual({$b:3});});it('should throw for incorrect global vars',function(){var fn=function fn(){return api.build({a:1});};expect(fn).toThrowError('EStyleSheet.build() params should contain global variables (start with $) '+'or media queries (start with @media). Got \'a\'.');});it('should use media-queries on global vars',function(){jest.setMock('react-native',{Platform:{OS:'ios'}});api.build({$a:1,'@media ios':{$a:2},'@media android':{$a:3}});var styles=api.create({$b:'$a'});expect(styles).toEqual({$b:2});});});describe('re-build',function(){var rawStyles={$a:1,$d:'$c',text:{$b:'1',fontSize:'$a',color:'$c'}};var resultStyles={$a:1,$d:3,_text:{$b:'1',fontSize:1,color:3},text:0};it('should re-calculate styles, created before rebuild',function(){var styles=api.create(rawStyles);api.build({$c:1,$theme:'foo'});api.build({$c:3,$theme:'bar'});expect(styles).toEqual(resultStyles);});it('should re-calculate styles, created between rebuild',function(){api.build({$c:1,$theme:'foo'});var styles=api.create(rawStyles);api.build({$c:3,$theme:'bar'});expect(styles).toEqual(resultStyles);});it('should re-calculate styles, created after rebuild',function(){api.build({$c:1,$theme:'foo'});api.build({$c:3,$theme:'bar'});var styles=api.create(rawStyles);expect(styles).toEqual(resultStyles);});it('should not re-calculate styles for the same theme',function(){var styles=api.create(rawStyles);api.build({$c:3,$theme:'foo'});api.build({$c:1,$theme:'foo'});expect(styles).toEqual(resultStyles);});it('should not re-calculate styles for default theme',function(){var styles=api.create(rawStyles);api.build({$c:3});api.build({$c:1});expect(styles).toEqual(resultStyles);});it('should re-calculate styles after clearCache',function(){var styles=api.create(rawStyles);api.build({$c:1});api.clearCache();api.build({$c:3});expect(styles).toEqual(resultStyles);});});describe('value',function(){it('should calculate values as string',function(){api.build({$d:1});var res1=api.value('$d+1');var res2=api.value('100% - 10','width');expect(res1).toBe(2);expect(res2).toBe(90);});it('should calc value inside style as a function',function(){api.build({$defaultText:{fontSize:1}});var styles=api.create({text:function text(){return api.value('$defaultText');}});expect(styles).toEqual({_text:{fontSize:1},text:0});});});describe('child',function(){it('should export child method',function(){expect(typeof api.child).toBe('function');});});describe('subscribe',function(){it('should call listener, created before build',function(){var listener=jest.genMockFn();api.subscribe('build',listener);api.build();expect(listener.mock.calls.length).toBe(1);});it('should call listener, created after build',function(){var listener=jest.genMockFn();api.build();api.subscribe('build',listener);expect(listener.mock.calls.length).toBe(1);});it('should call listener on every build',function(){var listener=jest.genMockFn();api.subscribe('build',listener);api.build();api.build();expect(listener.mock.calls.length).toBe(2);});it('should throw error when subscribe to incorrect event',function(){var fn=function fn(){return api.subscribe('abc',function(){});};expect(fn).toThrowError('Only \'build\' event is currently supported.');});it('should throw error when subscribe with non-function listener',function(){var fn=function fn(){return api.subscribe('build',null);};expect(fn).toThrowError('Listener should be a function.');});});describe('original StyleSheet',function(){it('should proxy calls to original StyleSheet',function(){var obj=api.flatten([{x:1},{y:2}]);expect(obj).toEqual({x:1,y:2});});it('should return props of original StyleSheet',function(){expect(api.hairlineWidth).toEqual(1);});});});