var _value=require('../value');var _value2=_interopRequireDefault(_value);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var varsArr=[{$a:1,$b:2},{$a:2,$c:3,$e:'abc',$d:{x:1},$colWidth:'50%',$r:'2rem'}];describe('value',function(){it('should keep values without transform',function(){expect(new _value2.default(10,'prop',varsArr).calc()).toEqual(10);expect(new _value2.default('10','prop',varsArr).calc()).toEqual('10');expect(new _value2.default('abc','prop',varsArr).calc()).toEqual('abc');expect(new _value2.default([],'prop',varsArr).calc()).toEqual([]);expect(new _value2.default({x:1},'prop',varsArr).calc()).toEqual({x:1});expect(new _value2.default(null,'prop',varsArr).calc()).toEqual(null);});it('should calc var',function(){expect(new _value2.default('$a','prop',varsArr).calc()).toEqual(1);expect(new _value2.default('$b','prop',varsArr).calc()).toEqual(2);expect(new _value2.default('$e','prop',varsArr).calc()).toEqual('abc');expect(new _value2.default('$d','prop',varsArr).calc()).toEqual({x:1});expect(new _value2.default('$r','prop',varsArr).calc()).toEqual(32);expect(function(){return new _value2.default('$xxx','prop',varsArr).calc();}).toThrowError('Unresolved variable: $xxx');expect(new _value2.default('$colWidth','prop',varsArr).calc()).toEqual('50%');});it('should calc rem',function(){expect(new _value2.default('0.5rem','prop',varsArr).calc()).toEqual(8);expect(new _value2.default('rem','prop',varsArr).calc()).toEqual(16);});it('should calc simple operations',function(){expect(new _value2.default('6 + 2','prop',varsArr).calc()).toEqual(8);expect(new _value2.default('6-2','prop',varsArr).calc()).toEqual(4);expect(new _value2.default('6 * 2','prop',varsArr).calc()).toEqual(12);expect(new _value2.default('6 / 2','prop',varsArr).calc()).toEqual(3);});it('should substitute vars/rems/percents in operations',function(){expect(new _value2.default('$a + 0.5rem','prop',varsArr).calc()).toEqual(9);expect(new _value2.default('$c-$a','prop',varsArr).calc()).toEqual(2);expect(new _value2.default('$a * rem','prop',varsArr).calc()).toEqual(16);expect(new _value2.default('$a * $r','prop',varsArr).calc()).toEqual(32);expect(new _value2.default('$c / 2','prop',varsArr).calc()).toEqual(1.5);expect(new _value2.default('50% + 1','width',varsArr).calc()).toEqual(51);expect(new _value2.default('$colWidth + 2','prop',varsArr).calc()).toEqual(52);});it('should not calc operations for non-operation values',function(){expect(new _value2.default('flex-start','prop',varsArr).calc()).toEqual('flex-start');expect(new _value2.default('1 - start','prop',varsArr).calc()).toEqual('1 - start');});it('should apply scale',function(){expect(new _value2.default('0.5rem','propWidth',[{$scale:3}]).calc()).toEqual(24);expect(new _value2.default('0.5rem','prop',[{$scale:3}]).calc()).toEqual(8);});it('should exec value as a function',function(){expect(new _value2.default(function(){return 10;},'prop').calc()).toEqual(10);expect(new _value2.default(function(){return'$a';},'prop',[{$a:1}]).calc()).toEqual(1);});it('should throw for complex operations',function(){expect(function(){return new _value2.default('$c - $a + 1','prop',varsArr).calc();}).toThrow('Unresolved variable: $c - $a');});});