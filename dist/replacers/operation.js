Object.defineProperty(exports,"__esModule",{value:true});var operators={'*':function _(v1,v2){return v1*v2;},'+':function _(v1,v2){return v1+v2;},'-':function _(v1,v2){return v1-v2;},'/':function _(v1,v2){return v1/v2;}};exports.default={isOperation:isOperation,exec:exec};function isOperation(str){var opInfo=findOperator(str);if(opInfo){opInfo.v1=str.substr(0,opInfo.pos).trim();opInfo.v2=str.substr(opInfo.pos+1).trim();delete opInfo.pos;return opInfo;}else{return false;}}function exec(opInfo){assertOperator(opInfo.operator);assertValue(opInfo.v1);assertValue(opInfo.v2);if(opInfo.operator==='/'){assertDivisor(opInfo.v2);}var fn=operators[opInfo.operator];return fn(opInfo.v1,opInfo.v2);}function findOperator(str){for(var operator in operators){var pos=str.indexOf(operator);if(pos>=0){return{operator:operator,pos:pos};}}}function assertOperator(operator){if(!operators[operator]){throw new Error('Unknown operator: '+operator);}}function assertValue(value){if(typeof value!=='number'){throw new Error('Operation value should be number, you try: '+String(value));}}function assertDivisor(divisor){if(divisor===0){throw new Error('Operation divisor should not be zero');}}